spring:
  datasource:
    url: jdbc:mysql://mysql_9oormthonuniv_be:3306/mysql9
    username: ${MYSQL_USER}
    password: ${MYSQL_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    hibernate:
      ddl-auto: update # JPA를 통해 Entity에 작성한대로 테이블 자동 생성 -> 배포 시 변경
    show-sql: true  # SQL 쿼리 로깅 활성화 -> 배포 시 변경
    properties:
      hibernate:
        format_sql: true
    open-in-view: false

  kafka:
    bootstrap-servers: kafka_9oormthonuniv_be:9092
    consumer:
      group-id: bookstore-group
      auto-offset-reset: earliest
      enable-auto-commit: true  # 자동 커밋 사용 (필요한 경우 false 후 수동 커밋 구현)
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.trusted.packages: "*"

#  docker:
#    compose:
#      enabled: true
#      file: compose.yaml  # 경로 주의

server:
  port: 8080  # 로컬 Spring Boot API 포트

jwt:
  secret: ${APP_JWT_SECRET}
  expiration: ${APP_JWT_EXPIRATION_MS} # 1시간

cloud:
  aws:
    s3:
      bucket: ${AWS_S3_BUCKET_NAME}
    credentials:
      access-key: ${AWS_ACCESS_KEY_ID}
      secret-key: ${AWS_SECRET_ACCESS_KEY}
    region:
      static: ap-northeast-2
    stack:
      auto: false

logging:
  level:
    root: info